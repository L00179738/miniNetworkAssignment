# Network should be configured to address scalability, load balancer, security and extensibility
# Initially, two Availability Zones are configured
# Bastion (jump box) will be configured to ensure no data is exposed in public network
# Front-end web servers will be deployed into a scalable private subnet
# applications server will be deployed into scalable private subnet
# RDS database (or any other DB) will be deployed into the private subnet
# Internet gateway with routing tables will be applied and implemented
# CIDR blocks are defined for all of the subnets


Parameters:
  VirtualCloudCIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 10.10.0.0/16
  PublicSubnetACIDR:
    Description: CIDR Definition for Bastion - Class C
    Type: String
    Default: 10.10.10.0/24
  PublicSubnetBCIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 10.10.11.0/24
  FrontEndWebACIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 10.10.20.0/24
  FrontEndWebBCIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 10.10.21.0/24
  DBSubnetACIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 10.10.50.0/24
  DBSubnetBCIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 10.10.51.0/24

  DestinationCIDR:
    Description: CIDR Definition for VPC - Class B
    Type: String
    Default: 0.0.0.0/0

  VirtualCloudDescription:
    Description: Encapsulated environment for HITT training courses system
    Type: String

  InstanceType:
    Description: Instance type for selected zone
    Type: String
    Default: t3.micro

  AvailabilityRegion:
    Description: Region for the deployment
    Type: String
    Default: eu-north-1a

  LinuxImage:
    Description: AMI Image Name for the region
    Type: String
    Default: ami-03a2c69daedb78c95

  SshPort:
    Description: SSH Port to access Bastion
    Type: Number
    Default: 22
    MinValue: 22
    MaxValue: 65535

  KeyName:
    Description: security key name
    Type: String
    Default: TestKP

  LaunchTemplateVersionNumber:
    Default: 1
    Type: String

  SecurityGroupDescription:
    Type: String
    Default: EC2 Security Group

#  SecurityGroupDescription:
#    Description: Security Group Description
#    Type: String
#  KeyName:
#    Description: Key Pair for EC2
#    Type: 'AWS::EC2::KeyPair::KeyName'
#
Resources:
#  VPC Container with two public subnets and 2 private subnets
  VirtualCloud:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VirtualCloudCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VirtualCloudDescription
#
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualCloud
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetACIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VirtualCloudDescription} Public Subnet for Bastion [AZ0]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualCloud
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetBCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VirtualCloudDescription} Public Subnet for Bastion [AZ1]

  FrontEndWebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualCloud
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref FrontEndWebACIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VirtualCloudDescription} Private Subnet for Front End Web system [AZ0]

  FrontEndWebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualCloud
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref FrontEndWebBCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VirtualCloudDescription} Private Subnet for Front End Web system[AZ1]

  DBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualCloud
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref DBSubnetACIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VirtualCloudDescription} Private Subnet for RDS [AZ0]

  DBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualCloud
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref DBSubnetBCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VirtualCloudDescription} Private Subnet for RDS [AZ1]

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "DB Subnet Group"
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
        - !Ref "DBSubnetA"
        - !Ref "DBSubnetB"

  # NETWORK DEFINITION
  InternetGateway:
#    Type: AWS::EC2::EgressOnlyInternetGateway
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VirtualCloud
      InternetGatewayId: !Ref 'InternetGateway'
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VirtualCloud
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteTable'
      DestinationCidrBlock: !Ref DestinationCIDR
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouteTable
  PublicSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouteTable
  #Define NAT for private subnets
  # Define EIP
  ElasticIPA:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  ElasticIPB:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPA.AllocationId
      SubnetId: !Ref PublicSubnetA

  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPB.AllocationId
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VirtualCloud
  PrivateRouteTableToNATA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: !Ref DestinationCIDR
      NatGatewayId: !Ref NATGatewayA
  FrontEndWebSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociationZ
    Properties:
      SubnetId: !Ref FrontEndWebSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VirtualCloud
  PrivateRouteTableToNATB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: !Ref DestinationCIDR
      NatGatewayId: !Ref NATGatewayB
  FrontEndWebSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontEndWebSubnetB
      RouteTableId: !Ref PrivateRouteTableB



  BastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${VirtualCloudDescription} Auto Scaling Group for Bastion
#      LaunchConfigurationName: !Ref BastionLaunchTemplate
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionLaunchTemplate
        Version: !Ref LaunchTemplateVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1

  #  BastionLaunchConfiguration:
#    Type: AWS::AutoScaling::LaunchConfiguration
#    Properties:
#      LaunchConfigurationName: !Sub ${VirtualCloudDescription} Bastion Launch Config
#      AssociatePublicIpAddress: true
#      ImageId: !Ref LinuxImage
#      InstanceType: !Ref InstanceType
#      SecurityGroups:
#        - !Ref SecurityGroup
  BastionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-bastion-launch-template'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref BastionSecurityGroup
#              - !Ref EC2SecurityGroup
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: !Ref LinuxImage
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security group
      VpcId: !Ref VirtualCloud
      GroupName: Bastion Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  FrontEndWebAutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AttachGateway
    Properties:
      AutoScalingGroupName: !Sub ${VirtualCloudDescription} Front End Servers ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontEndWebLaunchTemplate
        Version: !GetAtt FrontEndWebLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref FrontEndWebSubnetA
        - !Ref FrontEndWebSubnetB
      TargetGroupARNs:
        - !Ref BalancerTargetGroup
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 2


  FrontEndWebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WebServerLaunchTemplate
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref LinuxImage
        SecurityGroupIds:
          - !GetAtt BastionSecurityGroup.GroupId
#          - NetworkInterfaces:
#          - DeviceIndex: 0
#            AssociatePublicIpAddress: true
#            Groups:
#              - !Ref BastionSecurityGroup
#            DeleteOnTermination: true

  BalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VirtualCloud
      TargetType: instance

  FrontEndWebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
      - AttachGateway
      - FrontEndWebAutoScaling
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref BastionSecurityGroup
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: "HTTP"


# RDs instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: 'db.t3.micro'
      Engine: 'mysql'
      EngineVersion: '5.7'
      MasterUsername: 'root'
      MasterUserPassword: 'Password123'
      VPCSecurityGroups:
        - !Ref BastionSecurityGroup
      DBSubnetGroupName:
        Ref: "DBSubnetGroup"

          #      HealthCheck:
#        Target: "HTTP:80/"
#        HealthyThreshold: "2"
#        UnhealthyThreshold: "5"
#        Interval: "50"
#        Timeout: "3"

#  LBListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    DependsOn: FrontEndWebServerLoadBalancer
#    Properties:
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref BalancerTargetGroup
#      LoadBalancerArn: !Ref FrontEndWebServerLoadBalancer.Arn
#      Port: 80
#      Protocol: HTTP




#  PrivateRoute:
#    Type: AWS::EC2::Route
#    DependsOn: NATGateway
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable
#      DestinationCidrBlock: !Ref DestinationCIDR
#      NatGatewayId: !Ref NATGateway

#  FrontEndWebSubnetARouteTable:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref FrontEndWebSubnetA
#      RouteTableId: !Ref PrivateRouteTable
#
#  FrontEndWebSubnetBRouteTable:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref FrontEndWebSubnetB
#      RouteTableId: !Ref PrivateRouteTable


#  FrontEndWebSubnetARouteTable:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref FrontEndWebSubnetA
#      RouteTableId: !Ref RouteTable
#
#  FrontEndWebBRouteTable:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref FrontEndWebSubnetA
#      RouteTableId: !Ref RouteTable

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "General Security Rule"
      VpcId: !Ref VirtualCloud


          #  SecurityGroupSshIngressRule:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref SecurityGroup
#      IpProtocol: "tcp"
#      FromPort: !Ref SshPort
#      ToPort: !Ref SshPort
#      CidrIp: !Ref SourceCidr


#
#  EC2Instance1:
#    Type: AWS::EC2::Instance
#    Properties:
#      AvailabilityZone: eu-north-1a
#      ImageId: ami-03a2c69daedb78c95
#      InstanceType: t3.micro
#      SecurityGroups:
#        - !Ref EC2SecurityGroup
#      KeyName: !Ref KeyName
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash
#          yum update -y
#          yum install -y httpd
#          systemctl start httpd
#          systemctl enable httpd
#          #echo "<h1>Hello from Region eu-north-1a</h1>" > /var/www/html/index.html
#
#  EC2Instance2:
#    Type: AWS::EC2::Instance
#    Properties:
#      AvailabilityZone: eu-north-1b
#      ImageId: ami-03a2c69daedb78c95
#      InstanceType: t3.micro
#      SecurityGroups:
#        - !Ref EC2SecurityGroup
#      KeyName: !Ref KeyName
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash
#          yum update -y
#          yum install -y httpd
#          systemctl start httpd
#          systemctl enable httpd
#          #echo "<h1>Hello from Region eu-north-1b</h1>" > /var/www/html/index.html
#
#  ELBSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: ELB Security Group
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 80
#          ToPort: 80
#          CidrIp: 0.0.0.0/0
#
#  EC2SecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: !Ref SecurityGroupDescription
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 80
#          ToPort: 80
#          SourceSecurityGroupId:
#            Fn::GetAtt:
#              - ELBSecurityGroup
#              - GroupId
#        - IpProtocol: tcp
#          FromPort: 22
#          ToPort: 22
#          CidrIp: 0.0.0.0/0